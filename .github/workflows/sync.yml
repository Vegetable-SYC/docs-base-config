name: Multi-Repo Sync
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sync-repos:
    runs-on: ubuntu-latest
    env:
      OWNER: "Vegetable-SYC"
      EVENT_TYPE: "update-docs-config"
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install @octokit/rest js-yaml

      - name: Read repository config
        id: read-config
        run: |
          CONFIG_PATH="./.github/config/sync-repos.yml"
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "::error::Config file $CONFIG_PATH not found!"
            exit 1
          fi
          
          JSON_DATA=$(node -e "
            const yaml = require('js-yaml');
            const fs = require('fs');
            try {
              const config = yaml.load(fs.readFileSync('$CONFIG_PATH', 'utf8'));
              console.log(JSON.stringify(config.repositories));
            } catch (e) {
              console.error(e);
              process.exit(1);
            }
          ")
          echo "repos=$JSON_DATA" >> $GITHUB_OUTPUT

      - name: Trigger repository dispatch
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.CROSS_REPO_PAT }}
        with:
          script: |
            const { Octokit } = require('@octokit/rest')
            const repositories = JSON.parse('${{ toJSON(steps.read-config.outputs.repos) }}'.replace(/\\/g, '')) // 双重转义处理
            
            const owner = process.env.OWNER
            const eventType = process.env.EVENT_TYPE

            const octokit = new Octokit({
              auth: process.env.PAT,
              request: { fetch: require('node-fetch') }
            })

            for (const repo of repositories) {
              try {
                console.log(`Triggering ${owner}/${repo.name} on ${repo.branch}`)
                
                const response = await octokit.rest.repos.createDispatchEvent({
                  owner,
                  repo: repo.name,
                  event_type: eventType,
                  client_payload: {
                    branch: repo.branch
                  }
                })

                console.log(`Status: ${response.status} - ${repo.name}`)
              } catch (error) {
                console.error(`[ERROR] ${repo.name}:`, error.message)
                if (error.response && error.response.data) {
                  console.error('Details:', JSON.stringify(error.response.data))
                }
              }
            }