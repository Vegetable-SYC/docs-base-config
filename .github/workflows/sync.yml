name: Multi-Repo Sync
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  sync-repos:
    runs-on: ubuntu-latest
    env:
      OWNER: "Vegetable-SYC"
      EVENT_TYPE: "update-docs-config"
    steps:
      - uses: actions/checkout@v4

      - name: Install node-fetch
        run: npm install node-fetch@2  # 指定兼容版本

      - name: Install dependencies
        run: npm install js-yaml @octokit/rest

      - name: Generate repository config
        id: config
        run: |
          CONFIG_PATH="./.github/config/sync-repos.yml"
          OUTPUT_PATH="./repo-config.json"
          
          # 添加调试：显示原始配置文件内容
          echo "=== RAW YAML CONTENT ==="
          cat $CONFIG_PATH
          
          node -e "
            const yaml = require('js-yaml');
            const fs = require('fs');
            try {
              const config = yaml.load(fs.readFileSync('$CONFIG_PATH', 'utf8'));
              console.log('Parsed YAML:', JSON.stringify(config, null, 2));  # 调试输出
              fs.writeFileSync('$OUTPUT_PATH', JSON.stringify(config.repositories), 'utf8');
            } catch (e) {
              console.error('Config processing failed:', e);
              process.exit(1);
            }
          "
          
          # 添加调试：验证生成的 JSON 文件
          echo "=== GENERATED JSON ==="
          cat $OUTPUT_PATH
          
          # 确保输出变量正确设置
          echo "config_path=$OUTPUT_PATH" >> $GITHUB_OUTPUT
          echo "OUTPUT_PATH=$OUTPUT_PATH"   # 直接打印变量值

          node -e "
            const yaml = require('js-yaml');
            const fs = require('fs');
            try {
              const config = yaml.load(fs.readFileSync('$CONFIG_PATH', 'utf8'));
              fs.writeFileSync('$OUTPUT_PATH', JSON.stringify(config.repositories), 'utf8');
            } catch (e) {
              console.error('Config processing failed:', e);
              process.exit(1);
            }
          "
          echo "config_path=$OUTPUT_PATH" >> $GITHUB_OUTPUT

      - name: Trigger repository dispatch
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.CROSS_REPO_PAT }}
        with:
          script: |
            const fs = require('fs').promises;
            const { Octokit } = require('@octokit/rest');
            
            // 从文件读取确保数据完整性
            const rawData = await fs.readFile('${{ steps.config.outputs.config_path }}', 'utf8');
            const repositories = JSON.parse(rawData);
            
            const octokit = new Octokit({
              auth: process.env.PAT,
              request: { fetch: require('node-fetch') }
            });

            for (const repo of repositories) {
              try {
                console.log(`🚀 Triggering ${process.env.OWNER}/${repo.name}@${repo.branch}`);
                
                const { status } = await octokit.rest.repos.createDispatchEvent({
                  owner: process.env.OWNER,
                  repo: repo.name,
                  event_type: process.env.EVENT_TYPE,
                  client_payload: { branch: repo.branch }
                });

                console.log(`✅ ${repo.name} triggered (HTTP ${status})`);
              } catch (error) {
                console.error(`❌ ${repo.name} failed: ${error.message}`);
                if (error.response) {
                  console.error('Error details:', JSON.stringify({
                    status: error.status,
                    headers: error.response.headers,
                    data: error.response.data
                  }, null, 2));
                }
              }
            }